{"version":3,"sources":["components/post.compenent.js","screens/homepage.screen.js","components/navbar.component.js","serviceWorker.js","index.js"],"names":["ActionButton","props","post","action","type","width","height","viewBox","class","fill","xmlns","fill-rule","d","Post","className","url","slug","href","title","summary","PostList","useState","error","setError","isLoaded","setIsLoaded","posts","setPosts","useEffect","fetch","then","res","json","result","message","map","index","key","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"sKAGO,SAASA,EAAaC,GAEJA,EAAhBC,KACP,MAAoB,SADGD,EAAVE,OACFC,KAGP,yBAAKC,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,MAAM,sBAAsBC,KAAK,eAAeC,MAAM,8BACtG,0BAAMC,YAAU,UAAUC,EAAE,yGAO9B,yBAAKP,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,MAAM,4BAA4BC,KAAK,eAAeC,MAAM,8BAC5G,0BAAMC,YAAU,UAAUC,EAAE,mNAMrB,SAASC,EAAKZ,GAC5B,IACSC,EAASD,EAATC,KACFY,EAAYb,EAAMa,UAAYb,EAAMa,UAAY,QAClDC,EAAG,eAAWb,EAAKc,MACvB,OACE,6BACE,yBAAKF,UAAWA,GACd,yBAAKA,UAAU,cACX,wBAAIA,UAAU,QAAO,uBAAGG,KAAMF,GAAMb,EAAKgB,QACzC,2BAAIhB,EAAKiB,UAEb,6BACI,kBAACnB,EAAD,CAAcE,KAAMA,EAAMC,OAAQ,CAACC,KAAM,aCjC9C,SAASgB,EAASnB,GACxB,IAAD,EAC4BoB,mBAAS,MADrC,mBACSC,EADT,KACgBC,EADhB,OAEkCF,oBAAS,GAF3C,mBAESG,EAFT,KAEmBC,EAFnB,OAG4BJ,mBAAS,IAHrC,mBAGSK,EAHT,KAGgBC,EAHhB,KA0BE,OAlBAC,qBAAU,WACRC,MAAM,mCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACCR,GAAY,GACZE,EAASM,MAKX,SAACX,GACCG,GAAY,GACZF,EAASD,QAGd,IAECA,EACK,uCAAaA,EAAMY,SAChBV,EAINE,EAAMS,KACF,SAACjC,EAAMkC,GAAP,OAAiB,kBAACvB,EAAD,CAAMX,KAAMA,EAAMmC,IAAG,UAAKD,EAAL,mBAJvC,2CChCJ,SAASE,EAAOrC,GAEnB,OACI,yBAAKO,MAAM,+CACP,uBAAGA,MAAM,eAAeS,KAAK,KAA7B,SACA,4BAAQT,MAAM,iBAAiBJ,KAAK,SAASmC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACpJ,0BAAMnC,MAAM,yBAEhB,yBAAKA,MAAM,2BAA2BoC,GAAG,aACrC,wBAAIpC,MAAM,cACN,wBAAIA,MAAM,mBACN,uBAAGA,MAAM,WAAWS,KAAK,KAAzB,QAAkC,0BAAMT,MAAM,WAAZ,eAEtC,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWS,KAAK,WAAzB,aCJJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAACb,EAAD,MACAc,SAASC,eAAe,cAG5BH,IAASC,OACL,kBAAC/B,EAAD,MACAgC,SAASC,eAAe,UDmHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1B,MAAK,SAAA2B,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMY,a","file":"static/js/main.b03a8fce.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport function ActionButton(props)\n{\n  const {post, action} = props\n  if (action.type === 'save')\n  {\n    return (\n      <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bookmark-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5V2z\"/>\n      </svg>\n    )\n  }\n  else\n  {\n    return (\n      <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bookmark-check-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" d=\"M4 0a2 2 0 0 0-2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4zm6.854 5.854a.5.5 0 0 0-.708-.708L7.5 7.793 6.354 6.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z\"/>\n      </svg>\n    )\n  }\n}\n\nexport default function Post(props)\n{\n  const { post } = props;\n  const className = props.className ? props.className : 'media';\n  let url = `post/${post.slug}`\n  return (\n    <div>\n      <div className={className}>\n        <div className='media-body'>\n            <h4 className='mt-0'><a href={url}>{post.title}</a></h4>\n            <p>{post.summary}</p>\n        </div>\n        <div>\n            <ActionButton post={post} action={{type: 'save'}} />\n        </div>\n      </div>\n    </div>\n  )\n}","import React, { useState, useEffect } from 'react';\n\nimport Post from '../components/post.compenent'\n\nexport function PostList(props)\n{\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [posts, setPosts] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:8000/api/posts\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          setPosts(result);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n      )\n  }, [])\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n      return (\n        posts.map(\n            (post, index) => <Post post={post} key={`${index}-{post.id}`} />\n        )\n      )\n    }\n}","import React from 'react';\n\nexport function Navbar(props)\n{\n    return (\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a class=\"navbar-brand\" href=\"/\">Kroid</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item active\">\n                        <a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/write/\">Write</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { PostList } from './screens/homepage.screen';\nimport { Navbar } from './components/navbar.component';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Navbar />,\n    document.getElementById('kroid-nav')\n);\n\nReactDOM.render(\n    <PostList />,\n    document.getElementById('kroid')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}