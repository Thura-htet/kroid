{"version":3,"sources":["components/post.compenent.js","actions/http.helpers.js","screens/homepage.screen.js","components/buttons.component.js","components/post-detail.component.js","screens/post-detail.screen.js","components/navbar.component.js","components/comment.component.js","screens/write.screen.js","App.js","serviceWorker.js","index.js"],"names":["ActionButton","props","post","action","type","width","height","viewBox","class","fill","xmlns","fill-rule","d","Post","className","url","slug","href","title","summary","author_name","getData","a","responseData","isLoaded","data","error","fetch","response","ok","status","json","postData","method","headers","body","JSON","stringify","PostList","useState","setError","setIsLoaded","posts","setPosts","useEffect","then","map","index","key","SubmitPostButton","inputs","onClick","e","preventDefault","current","value","content","alert","SubmitCommentButton","commentInput","commentElement","target","parentElement","Number","dataset","parentId","parentType","FullArticle","parse","html_content","PostDetail","setPost","path","window","location","pathname","console","log","post_url","comment_url","useRef","data-parent-type","data-parent-id","ref","Navbar","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","ReplyComment","Write","titleInput","summaryInput","contentInput","name","placeholder","autoComplete","App","exact","component","Boolean","hostname","match","document","getElementById","ReactDOM","render","postList","detailViewIdentifier","commentElements","querySelectorAll","forEach","comment","appElement","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.4f6d522c.chunk.js","sourcesContent":["import React from 'react';\n\n\nexport function ActionButton(props)\n{\n  const {post, action} = props\n  if (action.type === 'save')\n  {\n    return (\n      <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bookmark-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" d=\"M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.74.439L8 13.069l-5.26 2.87A.5.5 0 0 1 2 15.5V2z\"/>\n      </svg>\n    )\n  }\n  else\n  {\n    return (\n      <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-bookmark-check-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path fill-rule=\"evenodd\" d=\"M4 0a2 2 0 0 0-2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4zm6.854 5.854a.5.5 0 0 0-.708-.708L7.5 7.793 6.354 6.646a.5.5 0 1 0-.708.708l1.5 1.5a.5.5 0 0 0 .708 0l3-3z\"/>\n      </svg>\n    )\n  }\n}\n\nexport default function Post(props)\n{\n  const { post } = props;\n  const className = props.className ? props.className : 'media';\n  let url = `post/${post.slug}`\n  return (\n    <div>\n      <div className={className}>\n        <div className='media-body'>\n            <h4 className='mt-0'><a href={url}>{post.title}</a></h4>\n            <h5>{post.summary}</h5>\n            <h6>By: {post.author_name}</h6>\n            <hr/>\n        </div>\n        <div>\n            <ActionButton post={post} action={{type: 'save'}} />\n        </div>\n      </div>\n    </div>\n  )\n}","// it's working fine but this is still a complete mess\n// have to come back after having understood async-await and promises\n\nconst getData = async (url) => {\n    const responseData = {\n        isLoaded: false,\n        data: null,\n        error: null\n    };\n    // probably need to make error to be an object with message field\n\n    const response = await fetch(url);\n\n    responseData.isLoaded = true;\n    if (!response.ok)\n    {\n        // throw an error so that the caller can use .catch\n        responseData.error = `An error has occured: ${response.status}`;\n    }\n    responseData.data = await response.json();\n\n    return responseData;\n}\n\nconst postData = async (url, data) => {\n    const responseData = {\n        isLoaded: false,\n        data: null,\n        error: null\n    }\n\n    const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n    });\n    responseData.isLoaded = true;\n    if (!response.ok) \n    {\n        // throw an error so that the caller can use .catch\n        responseData.error = `An error has occured: ${response.status}`;\n    }\n    responseData.data = await response.json()\n\n    return responseData;\n}\n\nexport { getData, postData };\n\n// get response => postData(url, data).then(response => response)\n// get error => postData(url, data).catch(error => error.message)\n\n// const getData = (url) => {\n//     const responseData = {\n//         isLoaded: false,\n//         result: null,\n//         error: null\n//     };\n//     fetch(url)\n//     .then(res => res.json())\n//     .then(\n//         result => {\n//             responseData.isLoaded = true;\n//             responseData.result = result;\n//         },\n//         error => {\n//             responseData.isLoaded = true;\n//             responseData.error = error;\n//         }\n//     )\n//     return responseData;\n// }\n\n// const postData = (url, data) => {\n//     fetch(url, {\n//         method: 'post',\n//         headers: {\n//             'Content-Type': 'application/json'\n//         },\n//         body: JSON.stringify(data)\n//     });\n// }\n","import React, { useState, useEffect } from 'react';\n\nimport Post from '../components/post.compenent';\nimport { getData } from '../actions/http.helpers';\n\nexport function PostList(props)\n{\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [posts, setPosts] = useState([]);\n  const url = \"http://localhost:8000/api/posts/\";\n\n  useEffect(() => {\n    getData(url)\n    .then(response => {\n      setIsLoaded(response.isLoaded);\n      setError(response.error);\n      setPosts(response.data);\n    });\n  }, [url])\n\n  if (error) {\n    return <div>Error: {error}</div>; // changed from {error.message}\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n      return (\n        posts.map(\n            (post, index) => <Post post={post} key={`${index}-{post.id}`} />\n        )\n      )\n    }\n}","import React from 'react';\nimport { postData } from '../actions/http.helpers';\n\nexport function SubmitPostButton(props)\n{\n    const { url, inputs } = props;\n\n    function handleSubmit(e)\n    {\n        e.preventDefault();\n        const data = {\n            'title': inputs.title.current.value,\n            'summary': inputs.summary.current.value,\n            'content': inputs.content.current.value,\n        }\n        postData(url, data)\n        .then(response => {\n            if (response.error) {\n                alert(response.error);\n            }\n        });\n    }\n\n    return (\n        <button className='btn btn-primary' onClick={handleSubmit}>Submit</button>\n    )\n}\n\nexport function SubmitCommentButton(props)\n{\n    const { url, commentInput } = props;\n\n    function handleSubmit(e)\n    {\n        e.preventDefault();\n\n        const commentElement = e.target.parentElement;\n        const parentId = '' ? null : Number(commentElement.dataset.parentId);\n        const parentType = commentElement.dataset.parentType;\n        const data = {\n            'parentId': parentId,\n            'parentType': parentType,\n            'comment': commentInput.current.value\n        }\n        \n        postData(url, data)\n        .then(response => {\n            if (response.error) {\n                alert(response.error);\n            }\n        });\n        commentInput.current.value = ''\n    }\n\n    return (\n        <button className='btn btn-primary' onClick={handleSubmit}>Submit</button>\n    )\n}","import React from 'react';\n\nimport parse from 'html-react-parser';\n\nexport function FullArticle(props)\n{\n  const { post } = props;\n  return (\n    <div className='full-article'>\n      <h2>{post.title}</h2>\n      <h5>{post.summary}</h5>\n      <div>\n        {parse(`${post.html_content}`)}\n      </div>\n    </div>\n  )\n}","// might remove later\nimport React, { useState, useEffect, useRef } from 'react';\nimport { getData } from '../actions/http.helpers';\n\nimport { SubmitCommentButton } from '../components/buttons.component';\nimport { FullArticle } from '../components/post-detail.component';\n\nexport function PostDetail(props)\n{\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [post, setPost] = useState([]);\n\n    const path = window.location.pathname;\n    // these are logged four times\n    console.log(path)\n    const post_url = `http://localhost:8000/api${path}`;\n    const comment_url = `http://localhost:8000/api${path}/comments`;\n\n    const commentInput = useRef();\n  \n    useEffect(() => {\n      getData(post_url)\n      .then(response => {\n        setIsLoaded(response.isLoaded);\n        setError(response.error);\n        setPost(response.data);\n      });\n    }, [post_url])\n  \n    if (error) {\n      return <div>Error: {error}</div>; // changed from {error.message}\n    }\n    else if (!isLoaded) {\n      return <div>Loading...</div>;\n    }\n    else {\n        return (\n          <div className='container'>\n            <FullArticle post={post} />\n            <div className='parent-comment-form' data-parent-type='post' data-parent-id=''>\n              <div className='form-group'>\n                <textarea ref={commentInput} className='form-control'></textarea>\n              </div>\n              <SubmitCommentButton url={comment_url} commentInput={commentInput} />\n            </div>\n          </div>\n        )\n      }\n  }","import React from 'react';\n\nexport function Navbar(props)\n{\n    return (\n        <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n            <a class=\"navbar-brand\" href=\"/\">Kroid</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item active\">\n                        <a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"/write/\">Write</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}","import React, { useRef } from 'react';\n\nimport { SubmitCommentButton } from './buttons.component'\n\nexport function ReplyComment(props)\n{\n\tconst path = window.location.pathname;\n\tconst commentInput = useRef();\n\n\tfunction showCommentForm(e)\n\t{\n\t\tconst commentElement = e.target.parentElement;\n\t\tconst parentId = commentElement.dataset.parentId;\n\n\t\tconst comment_url = `http://localhost:8000/api${path}/comments`\n\t\t\n\t\t// use React.createElement\n\t\treturn (\n\t\t\t<div className='child-comment-form' data-parent-type='comment' data-parent-id={parentId}>\n\t\t\t\t<div className='form-group'>\n\t\t\t\t\t<textarea ref={commentInput} className='form-control'></textarea>\n\t\t\t  </div>\n\t\t\t  <SubmitCommentButton url={comment_url} commentInput={commentInput} />\n\t\t\t</div>\n\t\t)\n\t}\n\n\treturn (\n\t\t<button className='btn btn-primary' onClick={showCommentForm}>Reply</button>\n\t)\n}","import React, { useRef } from 'react';\n\nimport { SubmitPostButton } from '../components/buttons.component';\n\nexport function Write(props)\n{\n    const titleInput = useRef(),\n          summaryInput = useRef(),\n          contentInput = useRef();\n    const url = 'http://localhost:8000/api/posts/'\n\n    return (\n        <div className='write'>\n            <div className='form-group'>\n                <input ref={titleInput} className='form-control' type='text'\n                    name='title' placeholder='Enter Title' autoComplete='off'/>\n            </div>\n            <div className='form-group'>\n                <input ref={summaryInput} className='form-control' type='text'\n                    name='summary' placeholder='Enter Summary' autoComplete='off'/>\n            </div>\n            <div className='form-group'>\n                <textarea ref={contentInput} className='form-control' name='content'\n                    placeholder='Enter Content' autoComplete='off'>\n                </textarea>\n            </div>\n            <SubmitPostButton url={url} inputs={{\n                title: titleInput,\n                summary: summaryInput,\n                content: contentInput\n            }} />\n        </div>\n    )\n}","import React from 'react';\nimport { \n  BrowserRouter as Router,\n  Route\n} from 'react-router-dom'\n\nimport { Navbar } from './components/navbar.component';\nimport { PostList } from './screens/homepage.screen';\nimport { PostDetail } from './screens/post-detail.screen';\nimport { Write } from './screens/write.screen';\n\nfunction App()\n{\n  return (\n    <Router>\n      <div className=\"container\">\n        <Navbar />\n        <Route path=\"/\" exact component={PostList} />\n        <Route path=\"/write/\" component={Write} />\n        <Route path=\"/post/:slug/\" component={PostDetail} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport { PostList } from './screens/homepage.screen';\nimport { PostDetail } from './screens/post-detail.screen';\n\nimport { Navbar } from './components/navbar.component';\nimport { ReplyComment } from './components/comment.component';\n\nimport App from \"./App\"\n\nimport * as serviceWorker from './serviceWorker';\n\n// gonna have to improve this\nconst djangoIdentifier = document.getElementById('kroid');\nif (djangoIdentifier) {\n    ReactDOM.render(<Navbar />, document.getElementById('kroid-nav'));\n    const postList = document.getElementById('post-list');\n    if (postList) {\n        ReactDOM.render(<PostList />, postList);\n    }\n    const detailViewIdentifier = document.getElementById('article-detail');\n    if (detailViewIdentifier) {\n        ReactDOM.render(<PostDetail />, detailViewIdentifier);\n        const commentElements = document.querySelectorAll(\"child-comment-button\");\n        if (commentElements) {\n            commentElements.forEach(comment => {\n                ReactDOM.render(<ReplyComment />, comment);\n            });\n        }\n    }\n}\n\nconst appElement =  document.getElementById('root');\nif (appElement)\n{\n    ReactDOM.render(<App />, appElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}